// Code generated by MockGen. DO NOT EDIT.
// Source: builder/builder.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	builder "github.com/benny502/gorm-helper/builder"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Joins mocks base method.
func (m *MockDB) Joins(query string, args ...interface{}) builder.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(builder.DB)
	return ret0
}

// Joins indicates an expected call of Joins.
func (mr *MockDBMockRecorder) Joins(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockDB)(nil).Joins), varargs...)
}

// Model mocks base method.
func (m *MockDB) Model(value interface{}) builder.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", value)
	ret0, _ := ret[0].(builder.DB)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockDBMockRecorder) Model(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockDB)(nil).Model), value)
}

// Preload mocks base method.
func (m *MockDB) Preload(query string, args ...interface{}) builder.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(builder.DB)
	return ret0
}

// Preload indicates an expected call of Preload.
func (mr *MockDBMockRecorder) Preload(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockDB)(nil).Preload), varargs...)
}

// Where mocks base method.
func (m *MockDB) Where(query interface{}, args ...interface{}) builder.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(builder.DB)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockDBMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockDB)(nil).Where), varargs...)
}

// MockBuilder is a mock of Builder interface.
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder.
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance.
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockBuilder) Build(db builder.DB) builder.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", db)
	ret0, _ := ret[0].(builder.DB)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockBuilderMockRecorder) Build(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBuilder)(nil).Build), db)
}

// WithAssociate mocks base method.
func (m *MockBuilder) WithAssociate(associate builder.Associate) builder.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAssociate", associate)
	ret0, _ := ret[0].(builder.Builder)
	return ret0
}

// WithAssociate indicates an expected call of WithAssociate.
func (mr *MockBuilderMockRecorder) WithAssociate(associate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAssociate", reflect.TypeOf((*MockBuilder)(nil).WithAssociate), associate)
}

// WithWhere mocks base method.
func (m *MockBuilder) WithWhere(where builder.Where) builder.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithWhere", where)
	ret0, _ := ret[0].(builder.Builder)
	return ret0
}

// WithWhere indicates an expected call of WithWhere.
func (mr *MockBuilderMockRecorder) WithWhere(where interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithWhere", reflect.TypeOf((*MockBuilder)(nil).WithWhere), where)
}

// MockWhere is a mock of Where interface.
type MockWhere struct {
	ctrl     *gomock.Controller
	recorder *MockWhereMockRecorder
}

// MockWhereMockRecorder is the mock recorder for MockWhere.
type MockWhereMockRecorder struct {
	mock *MockWhere
}

// NewMockWhere creates a new mock instance.
func NewMockWhere(ctrl *gomock.Controller) *MockWhere {
	mock := &MockWhere{ctrl: ctrl}
	mock.recorder = &MockWhereMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWhere) EXPECT() *MockWhereMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockWhere) Add(query interface{}, elem ...interface{}) builder.Where {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range elem {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(builder.Where)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockWhereMockRecorder) Add(query interface{}, elem ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, elem...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWhere)(nil).Add), varargs...)
}

// GetArgs mocks base method.
func (m *MockWhere) GetArgs() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArgs")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// GetArgs indicates an expected call of GetArgs.
func (mr *MockWhereMockRecorder) GetArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArgs", reflect.TypeOf((*MockWhere)(nil).GetArgs))
}

// GetQuery mocks base method.
func (m *MockWhere) GetQuery() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetQuery indicates an expected call of GetQuery.
func (mr *MockWhereMockRecorder) GetQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockWhere)(nil).GetQuery))
}

// Next mocks base method.
func (m *MockWhere) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockWhereMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockWhere)(nil).Next))
}

// MockAssociate is a mock of Associate interface.
type MockAssociate struct {
	ctrl     *gomock.Controller
	recorder *MockAssociateMockRecorder
}

// MockAssociateMockRecorder is the mock recorder for MockAssociate.
type MockAssociateMockRecorder struct {
	mock *MockAssociate
}

// NewMockAssociate creates a new mock instance.
func NewMockAssociate(ctrl *gomock.Controller) *MockAssociate {
	mock := &MockAssociate{ctrl: ctrl}
	mock.recorder = &MockAssociateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssociate) EXPECT() *MockAssociateMockRecorder {
	return m.recorder
}

// GetJoinsString mocks base method.
func (m *MockAssociate) GetJoinsString() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJoinsString")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetJoinsString indicates an expected call of GetJoinsString.
func (mr *MockAssociateMockRecorder) GetJoinsString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJoinsString", reflect.TypeOf((*MockAssociate)(nil).GetJoinsString))
}

// GetPreload mocks base method.
func (m *MockAssociate) GetPreload() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreload")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPreload indicates an expected call of GetPreload.
func (mr *MockAssociateMockRecorder) GetPreload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreload", reflect.TypeOf((*MockAssociate)(nil).GetPreload))
}
